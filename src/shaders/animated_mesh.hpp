#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline: sokol-shdc --input src\shaders\animated_mesh.glsl --output src\shaders\gen\animated_mesh.hpp --slang glsl330:glsl300es:hlsl5:glsl100 --ifdef

    Overview:

        Shader program 'AnimatedMesh':
            Get shader desc: AnimatedMesh_shader_desc(sg_query_backend());
            Vertex shader: AnimatedMeshVS
                Attribute slots:
                    ATTR_AnimatedMeshVS_pos = 0
                    ATTR_AnimatedMeshVS_uvs = 1
                    ATTR_AnimatedMeshVS_normals = 2
                    ATTR_AnimatedMeshVS_boneIndices = 3
                    ATTR_AnimatedMeshVS_boneWeights = 4
                Uniform block 'AnimatedMeshParametersVS':
                    C struct: AnimatedMeshParametersVS_t
                    Bind slot: SLOT_AnimatedMeshParametersVS = 0
            Fragment shader: AnimatedMeshFS
                Image 'diffuseTexture':
                    Type: SG_IMAGETYPE_2D
                    Sample Type: SG_IMAGESAMPLETYPE_FLOAT
                    Bind slot: SLOT_diffuseTexture = 0
                Sampler 'diffuseSampler':
                    Type: SG_SAMPLERTYPE_FILTERING
                    Bind slot: SLOT_diffuseSampler = 0
                Image Sampler Pair 'diffuseTexture_diffuseSampler':
                    Image: diffuseTexture
                    Sampler: diffuseSampler


    Shader descriptor structs:

        sg_shader AnimatedMesh = sg_make_shader(AnimatedMesh_shader_desc(sg_query_backend()));

    Vertex attribute locations for vertex shader 'AnimatedMeshVS':

        sg_pipeline pip = sg_make_pipeline(&(sg_pipeline_desc){
            .layout = {
                .attrs = {
                    [ATTR_AnimatedMeshVS_pos] = { ... },
                    [ATTR_AnimatedMeshVS_uvs] = { ... },
                    [ATTR_AnimatedMeshVS_normals] = { ... },
                    [ATTR_AnimatedMeshVS_boneIndices] = { ... },
                    [ATTR_AnimatedMeshVS_boneWeights] = { ... },
                },
            },
            ...});


    Image bind slots, use as index in sg_bindings.vs.images[] or .fs.images[]

        SLOT_diffuseTexture = 0;

    Sampler bind slots, use as index in sg_bindings.vs.sampler[] or .fs.samplers[]

        SLOT_diffuseSampler = 0;

    Bind slot and C-struct for uniform block 'AnimatedMeshParametersVS':

        AnimatedMeshParametersVS_t AnimatedMeshParametersVS = {
            .mvp = ...;
            .bones = ...;
        };
        sg_apply_uniforms(SG_SHADERSTAGE_[VS|FS], SLOT_AnimatedMeshParametersVS, &SG_RANGE(AnimatedMeshParametersVS));

*/
#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <stddef.h>
#if !defined(SOKOL_SHDC_ALIGN)
  #if defined(_MSC_VER)
    #define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
  #else
    #define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
  #endif
#endif
#define ATTR_AnimatedMeshVS_pos (0)
#define ATTR_AnimatedMeshVS_uvs (1)
#define ATTR_AnimatedMeshVS_normals (2)
#define ATTR_AnimatedMeshVS_boneIndices (3)
#define ATTR_AnimatedMeshVS_boneWeights (4)
#define SLOT_diffuseTexture (0)
#define SLOT_diffuseSampler (0)
#define SLOT_AnimatedMeshParametersVS (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct AnimatedMeshParametersVS_t {
    glm::mat4 mvp;
    glm::mat4 bones[255];
} AnimatedMeshParametersVS_t;
#pragma pack(pop)
#if defined(SOKOL_GLCORE33)
/*
    #version 330
    
    uniform vec4 AnimatedMeshParametersVS[1024];
    layout(location = 3) in vec4 boneIndices;
    layout(location = 4) in vec4 boneWeights;
    layout(location = 0) in vec3 pos;
    out vec2 outUv;
    layout(location = 1) in vec2 uvs;
    layout(location = 2) in vec3 normals;
    
    void main()
    {
        mat4 _32 = mat4(AnimatedMeshParametersVS[int(boneIndices.x) * 4 + 4], AnimatedMeshParametersVS[int(boneIndices.x) * 4 + 5], AnimatedMeshParametersVS[int(boneIndices.x) * 4 + 6], AnimatedMeshParametersVS[int(boneIndices.x) * 4 + 7]) * boneWeights.x;
        mat4 _41 = mat4(AnimatedMeshParametersVS[int(boneIndices.y) * 4 + 4], AnimatedMeshParametersVS[int(boneIndices.y) * 4 + 5], AnimatedMeshParametersVS[int(boneIndices.y) * 4 + 6], AnimatedMeshParametersVS[int(boneIndices.y) * 4 + 7]) * boneWeights.y;
        mat4 _64 = mat4(AnimatedMeshParametersVS[int(boneIndices.z) * 4 + 4], AnimatedMeshParametersVS[int(boneIndices.z) * 4 + 5], AnimatedMeshParametersVS[int(boneIndices.z) * 4 + 6], AnimatedMeshParametersVS[int(boneIndices.z) * 4 + 7]) * boneWeights.z;
        mat4 _87 = mat4(AnimatedMeshParametersVS[int(boneIndices.w) * 4 + 4], AnimatedMeshParametersVS[int(boneIndices.w) * 4 + 5], AnimatedMeshParametersVS[int(boneIndices.w) * 4 + 6], AnimatedMeshParametersVS[int(boneIndices.w) * 4 + 7]) * boneWeights.w;
        gl_Position = (mat4(AnimatedMeshParametersVS[0], AnimatedMeshParametersVS[1], AnimatedMeshParametersVS[2], AnimatedMeshParametersVS[3]) * mat4(((_32[0] + _41[0]) + _64[0]) + _87[0], ((_32[1] + _41[1]) + _64[1]) + _87[1], ((_32[2] + _41[2]) + _64[2]) + _87[2], ((_32[3] + _41[3]) + _64[3]) + _87[3])) * vec4(pos, 1.0);
        outUv = uvs;
    }
    
*/
static const char AnimatedMeshVS_source_glsl330[1635] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x41,0x6e,0x69,0x6d,0x61,
    0x74,0x65,0x64,0x4d,0x65,0x73,0x68,0x50,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,0x72,
    0x73,0x56,0x53,0x5b,0x31,0x30,0x32,0x34,0x5d,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,
    0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x33,0x29,0x20,
    0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x62,0x6f,0x6e,0x65,0x49,0x6e,0x64,0x69,
    0x63,0x65,0x73,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,
    0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x34,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,
    0x34,0x20,0x62,0x6f,0x6e,0x65,0x57,0x65,0x69,0x67,0x68,0x74,0x73,0x3b,0x0a,0x6c,
    0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x70,0x6f,0x73,0x3b,
    0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x6f,0x75,0x74,0x55,0x76,0x3b,
    0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,
    0x20,0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,0x20,0x75,0x76,
    0x73,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,
    0x6f,0x6e,0x20,0x3d,0x20,0x32,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,
    0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x73,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,
    0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,
    0x20,0x5f,0x33,0x32,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x41,0x6e,0x69,0x6d,
    0x61,0x74,0x65,0x64,0x4d,0x65,0x73,0x68,0x50,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,
    0x72,0x73,0x56,0x53,0x5b,0x69,0x6e,0x74,0x28,0x62,0x6f,0x6e,0x65,0x49,0x6e,0x64,
    0x69,0x63,0x65,0x73,0x2e,0x78,0x29,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x34,0x5d,
    0x2c,0x20,0x41,0x6e,0x69,0x6d,0x61,0x74,0x65,0x64,0x4d,0x65,0x73,0x68,0x50,0x61,
    0x72,0x61,0x6d,0x65,0x74,0x65,0x72,0x73,0x56,0x53,0x5b,0x69,0x6e,0x74,0x28,0x62,
    0x6f,0x6e,0x65,0x49,0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,0x78,0x29,0x20,0x2a,0x20,
    0x34,0x20,0x2b,0x20,0x35,0x5d,0x2c,0x20,0x41,0x6e,0x69,0x6d,0x61,0x74,0x65,0x64,
    0x4d,0x65,0x73,0x68,0x50,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,0x72,0x73,0x56,0x53,
    0x5b,0x69,0x6e,0x74,0x28,0x62,0x6f,0x6e,0x65,0x49,0x6e,0x64,0x69,0x63,0x65,0x73,
    0x2e,0x78,0x29,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x36,0x5d,0x2c,0x20,0x41,0x6e,
    0x69,0x6d,0x61,0x74,0x65,0x64,0x4d,0x65,0x73,0x68,0x50,0x61,0x72,0x61,0x6d,0x65,
    0x74,0x65,0x72,0x73,0x56,0x53,0x5b,0x69,0x6e,0x74,0x28,0x62,0x6f,0x6e,0x65,0x49,
    0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,0x78,0x29,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,
    0x37,0x5d,0x29,0x20,0x2a,0x20,0x62,0x6f,0x6e,0x65,0x57,0x65,0x69,0x67,0x68,0x74,
    0x73,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x5f,0x34,
    0x31,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x41,0x6e,0x69,0x6d,0x61,0x74,0x65,
    0x64,0x4d,0x65,0x73,0x68,0x50,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,0x72,0x73,0x56,
    0x53,0x5b,0x69,0x6e,0x74,0x28,0x62,0x6f,0x6e,0x65,0x49,0x6e,0x64,0x69,0x63,0x65,
    0x73,0x2e,0x79,0x29,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x34,0x5d,0x2c,0x20,0x41,
    0x6e,0x69,0x6d,0x61,0x74,0x65,0x64,0x4d,0x65,0x73,0x68,0x50,0x61,0x72,0x61,0x6d,
    0x65,0x74,0x65,0x72,0x73,0x56,0x53,0x5b,0x69,0x6e,0x74,0x28,0x62,0x6f,0x6e,0x65,
    0x49,0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,0x79,0x29,0x20,0x2a,0x20,0x34,0x20,0x2b,
    0x20,0x35,0x5d,0x2c,0x20,0x41,0x6e,0x69,0x6d,0x61,0x74,0x65,0x64,0x4d,0x65,0x73,
    0x68,0x50,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,0x72,0x73,0x56,0x53,0x5b,0x69,0x6e,
    0x74,0x28,0x62,0x6f,0x6e,0x65,0x49,0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,0x79,0x29,
    0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x36,0x5d,0x2c,0x20,0x41,0x6e,0x69,0x6d,0x61,
    0x74,0x65,0x64,0x4d,0x65,0x73,0x68,0x50,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,0x72,
    0x73,0x56,0x53,0x5b,0x69,0x6e,0x74,0x28,0x62,0x6f,0x6e,0x65,0x49,0x6e,0x64,0x69,
    0x63,0x65,0x73,0x2e,0x79,0x29,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x37,0x5d,0x29,
    0x20,0x2a,0x20,0x62,0x6f,0x6e,0x65,0x57,0x65,0x69,0x67,0x68,0x74,0x73,0x2e,0x79,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x5f,0x36,0x34,0x20,0x3d,
    0x20,0x6d,0x61,0x74,0x34,0x28,0x41,0x6e,0x69,0x6d,0x61,0x74,0x65,0x64,0x4d,0x65,
    0x73,0x68,0x50,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,0x72,0x73,0x56,0x53,0x5b,0x69,
    0x6e,0x74,0x28,0x62,0x6f,0x6e,0x65,0x49,0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,0x7a,
    0x29,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x34,0x5d,0x2c,0x20,0x41,0x6e,0x69,0x6d,
    0x61,0x74,0x65,0x64,0x4d,0x65,0x73,0x68,0x50,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,
    0x72,0x73,0x56,0x53,0x5b,0x69,0x6e,0x74,0x28,0x62,0x6f,0x6e,0x65,0x49,0x6e,0x64,
    0x69,0x63,0x65,0x73,0x2e,0x7a,0x29,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x35,0x5d,
    0x2c,0x20,0x41,0x6e,0x69,0x6d,0x61,0x74,0x65,0x64,0x4d,0x65,0x73,0x68,0x50,0x61,
    0x72,0x61,0x6d,0x65,0x74,0x65,0x72,0x73,0x56,0x53,0x5b,0x69,0x6e,0x74,0x28,0x62,
    0x6f,0x6e,0x65,0x49,0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,0x7a,0x29,0x20,0x2a,0x20,
    0x34,0x20,0x2b,0x20,0x36,0x5d,0x2c,0x20,0x41,0x6e,0x69,0x6d,0x61,0x74,0x65,0x64,
    0x4d,0x65,0x73,0x68,0x50,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,0x72,0x73,0x56,0x53,
    0x5b,0x69,0x6e,0x74,0x28,0x62,0x6f,0x6e,0x65,0x49,0x6e,0x64,0x69,0x63,0x65,0x73,
    0x2e,0x7a,0x29,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x37,0x5d,0x29,0x20,0x2a,0x20,
    0x62,0x6f,0x6e,0x65,0x57,0x65,0x69,0x67,0x68,0x74,0x73,0x2e,0x7a,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x5f,0x38,0x37,0x20,0x3d,0x20,0x6d,0x61,
    0x74,0x34,0x28,0x41,0x6e,0x69,0x6d,0x61,0x74,0x65,0x64,0x4d,0x65,0x73,0x68,0x50,
    0x61,0x72,0x61,0x6d,0x65,0x74,0x65,0x72,0x73,0x56,0x53,0x5b,0x69,0x6e,0x74,0x28,
    0x62,0x6f,0x6e,0x65,0x49,0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,0x77,0x29,0x20,0x2a,
    0x20,0x34,0x20,0x2b,0x20,0x34,0x5d,0x2c,0x20,0x41,0x6e,0x69,0x6d,0x61,0x74,0x65,
    0x64,0x4d,0x65,0x73,0x68,0x50,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,0x72,0x73,0x56,
    0x53,0x5b,0x69,0x6e,0x74,0x28,0x62,0x6f,0x6e,0x65,0x49,0x6e,0x64,0x69,0x63,0x65,
    0x73,0x2e,0x77,0x29,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x35,0x5d,0x2c,0x20,0x41,
    0x6e,0x69,0x6d,0x61,0x74,0x65,0x64,0x4d,0x65,0x73,0x68,0x50,0x61,0x72,0x61,0x6d,
    0x65,0x74,0x65,0x72,0x73,0x56,0x53,0x5b,0x69,0x6e,0x74,0x28,0x62,0x6f,0x6e,0x65,
    0x49,0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,0x77,0x29,0x20,0x2a,0x20,0x34,0x20,0x2b,
    0x20,0x36,0x5d,0x2c,0x20,0x41,0x6e,0x69,0x6d,0x61,0x74,0x65,0x64,0x4d,0x65,0x73,
    0x68,0x50,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,0x72,0x73,0x56,0x53,0x5b,0x69,0x6e,
    0x74,0x28,0x62,0x6f,0x6e,0x65,0x49,0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,0x77,0x29,
    0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x37,0x5d,0x29,0x20,0x2a,0x20,0x62,0x6f,0x6e,
    0x65,0x57,0x65,0x69,0x67,0x68,0x74,0x73,0x2e,0x77,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x28,0x6d,
    0x61,0x74,0x34,0x28,0x41,0x6e,0x69,0x6d,0x61,0x74,0x65,0x64,0x4d,0x65,0x73,0x68,
    0x50,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,0x72,0x73,0x56,0x53,0x5b,0x30,0x5d,0x2c,
    0x20,0x41,0x6e,0x69,0x6d,0x61,0x74,0x65,0x64,0x4d,0x65,0x73,0x68,0x50,0x61,0x72,
    0x61,0x6d,0x65,0x74,0x65,0x72,0x73,0x56,0x53,0x5b,0x31,0x5d,0x2c,0x20,0x41,0x6e,
    0x69,0x6d,0x61,0x74,0x65,0x64,0x4d,0x65,0x73,0x68,0x50,0x61,0x72,0x61,0x6d,0x65,
    0x74,0x65,0x72,0x73,0x56,0x53,0x5b,0x32,0x5d,0x2c,0x20,0x41,0x6e,0x69,0x6d,0x61,
    0x74,0x65,0x64,0x4d,0x65,0x73,0x68,0x50,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,0x72,
    0x73,0x56,0x53,0x5b,0x33,0x5d,0x29,0x20,0x2a,0x20,0x6d,0x61,0x74,0x34,0x28,0x28,
    0x28,0x5f,0x33,0x32,0x5b,0x30,0x5d,0x20,0x2b,0x20,0x5f,0x34,0x31,0x5b,0x30,0x5d,
    0x29,0x20,0x2b,0x20,0x5f,0x36,0x34,0x5b,0x30,0x5d,0x29,0x20,0x2b,0x20,0x5f,0x38,
    0x37,0x5b,0x30,0x5d,0x2c,0x20,0x28,0x28,0x5f,0x33,0x32,0x5b,0x31,0x5d,0x20,0x2b,
    0x20,0x5f,0x34,0x31,0x5b,0x31,0x5d,0x29,0x20,0x2b,0x20,0x5f,0x36,0x34,0x5b,0x31,
    0x5d,0x29,0x20,0x2b,0x20,0x5f,0x38,0x37,0x5b,0x31,0x5d,0x2c,0x20,0x28,0x28,0x5f,
    0x33,0x32,0x5b,0x32,0x5d,0x20,0x2b,0x20,0x5f,0x34,0x31,0x5b,0x32,0x5d,0x29,0x20,
    0x2b,0x20,0x5f,0x36,0x34,0x5b,0x32,0x5d,0x29,0x20,0x2b,0x20,0x5f,0x38,0x37,0x5b,
    0x32,0x5d,0x2c,0x20,0x28,0x28,0x5f,0x33,0x32,0x5b,0x33,0x5d,0x20,0x2b,0x20,0x5f,
    0x34,0x31,0x5b,0x33,0x5d,0x29,0x20,0x2b,0x20,0x5f,0x36,0x34,0x5b,0x33,0x5d,0x29,
    0x20,0x2b,0x20,0x5f,0x38,0x37,0x5b,0x33,0x5d,0x29,0x29,0x20,0x2a,0x20,0x76,0x65,
    0x63,0x34,0x28,0x70,0x6f,0x73,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x6f,0x75,0x74,0x55,0x76,0x20,0x3d,0x20,0x75,0x76,0x73,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x00,
};
/*
    #version 330
    
    uniform sampler2D diffuseTexture_diffuseSampler;
    
    layout(location = 0) out vec4 frag_color;
    in vec2 outUv;
    
    void main()
    {
        frag_color = texture(diffuseTexture_diffuseSampler, outUv);
    }
    
*/
static const char AnimatedMeshFS_source_glsl330[204] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x33,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,
    0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x64,
    0x69,0x66,0x66,0x75,0x73,0x65,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x3b,0x0a,0x0a,
    0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,
    0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,
    0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x69,0x6e,0x20,0x76,0x65,0x63,
    0x32,0x20,0x6f,0x75,0x74,0x55,0x76,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,
    0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,
    0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,
    0x28,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,
    0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,
    0x6f,0x75,0x74,0x55,0x76,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif /* SOKOL_GLCORE33 */
#if defined(SOKOL_GLES3)
/*
    #version 100
    
    uniform vec4 AnimatedMeshParametersVS[1024];
    attribute vec4 boneIndices;
    attribute vec4 boneWeights;
    attribute vec3 pos;
    varying vec2 outUv;
    attribute vec2 uvs;
    attribute vec3 normals;
    
    void main()
    {
        mat4 _32 = mat4(AnimatedMeshParametersVS[int(boneIndices.x) * 4 + 4], AnimatedMeshParametersVS[int(boneIndices.x) * 4 + 5], AnimatedMeshParametersVS[int(boneIndices.x) * 4 + 6], AnimatedMeshParametersVS[int(boneIndices.x) * 4 + 7]) * boneWeights.x;
        mat4 _41 = mat4(AnimatedMeshParametersVS[int(boneIndices.y) * 4 + 4], AnimatedMeshParametersVS[int(boneIndices.y) * 4 + 5], AnimatedMeshParametersVS[int(boneIndices.y) * 4 + 6], AnimatedMeshParametersVS[int(boneIndices.y) * 4 + 7]) * boneWeights.y;
        mat4 _64 = mat4(AnimatedMeshParametersVS[int(boneIndices.z) * 4 + 4], AnimatedMeshParametersVS[int(boneIndices.z) * 4 + 5], AnimatedMeshParametersVS[int(boneIndices.z) * 4 + 6], AnimatedMeshParametersVS[int(boneIndices.z) * 4 + 7]) * boneWeights.z;
        mat4 _87 = mat4(AnimatedMeshParametersVS[int(boneIndices.w) * 4 + 4], AnimatedMeshParametersVS[int(boneIndices.w) * 4 + 5], AnimatedMeshParametersVS[int(boneIndices.w) * 4 + 6], AnimatedMeshParametersVS[int(boneIndices.w) * 4 + 7]) * boneWeights.w;
        gl_Position = (mat4(AnimatedMeshParametersVS[0], AnimatedMeshParametersVS[1], AnimatedMeshParametersVS[2], AnimatedMeshParametersVS[3]) * mat4(((_32[0] + _41[0]) + _64[0]) + _87[0], ((_32[1] + _41[1]) + _64[1]) + _87[1], ((_32[2] + _41[2]) + _64[2]) + _87[2], ((_32[3] + _41[3]) + _64[3]) + _87[3])) * vec4(pos, 1.0);
        outUv = uvs;
    }
    
*/
static const char AnimatedMeshVS_source_glsl100[1569] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x31,0x30,0x30,0x0a,0x0a,0x75,0x6e,
    0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x41,0x6e,0x69,0x6d,0x61,
    0x74,0x65,0x64,0x4d,0x65,0x73,0x68,0x50,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,0x72,
    0x73,0x56,0x53,0x5b,0x31,0x30,0x32,0x34,0x5d,0x3b,0x0a,0x61,0x74,0x74,0x72,0x69,
    0x62,0x75,0x74,0x65,0x20,0x76,0x65,0x63,0x34,0x20,0x62,0x6f,0x6e,0x65,0x49,0x6e,
    0x64,0x69,0x63,0x65,0x73,0x3b,0x0a,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,
    0x20,0x76,0x65,0x63,0x34,0x20,0x62,0x6f,0x6e,0x65,0x57,0x65,0x69,0x67,0x68,0x74,
    0x73,0x3b,0x0a,0x61,0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x20,0x76,0x65,0x63,
    0x33,0x20,0x70,0x6f,0x73,0x3b,0x0a,0x76,0x61,0x72,0x79,0x69,0x6e,0x67,0x20,0x76,
    0x65,0x63,0x32,0x20,0x6f,0x75,0x74,0x55,0x76,0x3b,0x0a,0x61,0x74,0x74,0x72,0x69,
    0x62,0x75,0x74,0x65,0x20,0x76,0x65,0x63,0x32,0x20,0x75,0x76,0x73,0x3b,0x0a,0x61,
    0x74,0x74,0x72,0x69,0x62,0x75,0x74,0x65,0x20,0x76,0x65,0x63,0x33,0x20,0x6e,0x6f,
    0x72,0x6d,0x61,0x6c,0x73,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,
    0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x5f,
    0x33,0x32,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x41,0x6e,0x69,0x6d,0x61,0x74,
    0x65,0x64,0x4d,0x65,0x73,0x68,0x50,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,0x72,0x73,
    0x56,0x53,0x5b,0x69,0x6e,0x74,0x28,0x62,0x6f,0x6e,0x65,0x49,0x6e,0x64,0x69,0x63,
    0x65,0x73,0x2e,0x78,0x29,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x34,0x5d,0x2c,0x20,
    0x41,0x6e,0x69,0x6d,0x61,0x74,0x65,0x64,0x4d,0x65,0x73,0x68,0x50,0x61,0x72,0x61,
    0x6d,0x65,0x74,0x65,0x72,0x73,0x56,0x53,0x5b,0x69,0x6e,0x74,0x28,0x62,0x6f,0x6e,
    0x65,0x49,0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,0x78,0x29,0x20,0x2a,0x20,0x34,0x20,
    0x2b,0x20,0x35,0x5d,0x2c,0x20,0x41,0x6e,0x69,0x6d,0x61,0x74,0x65,0x64,0x4d,0x65,
    0x73,0x68,0x50,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,0x72,0x73,0x56,0x53,0x5b,0x69,
    0x6e,0x74,0x28,0x62,0x6f,0x6e,0x65,0x49,0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,0x78,
    0x29,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x36,0x5d,0x2c,0x20,0x41,0x6e,0x69,0x6d,
    0x61,0x74,0x65,0x64,0x4d,0x65,0x73,0x68,0x50,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,
    0x72,0x73,0x56,0x53,0x5b,0x69,0x6e,0x74,0x28,0x62,0x6f,0x6e,0x65,0x49,0x6e,0x64,
    0x69,0x63,0x65,0x73,0x2e,0x78,0x29,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x37,0x5d,
    0x29,0x20,0x2a,0x20,0x62,0x6f,0x6e,0x65,0x57,0x65,0x69,0x67,0x68,0x74,0x73,0x2e,
    0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x5f,0x34,0x31,0x20,
    0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x41,0x6e,0x69,0x6d,0x61,0x74,0x65,0x64,0x4d,
    0x65,0x73,0x68,0x50,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,0x72,0x73,0x56,0x53,0x5b,
    0x69,0x6e,0x74,0x28,0x62,0x6f,0x6e,0x65,0x49,0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,
    0x79,0x29,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x34,0x5d,0x2c,0x20,0x41,0x6e,0x69,
    0x6d,0x61,0x74,0x65,0x64,0x4d,0x65,0x73,0x68,0x50,0x61,0x72,0x61,0x6d,0x65,0x74,
    0x65,0x72,0x73,0x56,0x53,0x5b,0x69,0x6e,0x74,0x28,0x62,0x6f,0x6e,0x65,0x49,0x6e,
    0x64,0x69,0x63,0x65,0x73,0x2e,0x79,0x29,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x35,
    0x5d,0x2c,0x20,0x41,0x6e,0x69,0x6d,0x61,0x74,0x65,0x64,0x4d,0x65,0x73,0x68,0x50,
    0x61,0x72,0x61,0x6d,0x65,0x74,0x65,0x72,0x73,0x56,0x53,0x5b,0x69,0x6e,0x74,0x28,
    0x62,0x6f,0x6e,0x65,0x49,0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,0x79,0x29,0x20,0x2a,
    0x20,0x34,0x20,0x2b,0x20,0x36,0x5d,0x2c,0x20,0x41,0x6e,0x69,0x6d,0x61,0x74,0x65,
    0x64,0x4d,0x65,0x73,0x68,0x50,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,0x72,0x73,0x56,
    0x53,0x5b,0x69,0x6e,0x74,0x28,0x62,0x6f,0x6e,0x65,0x49,0x6e,0x64,0x69,0x63,0x65,
    0x73,0x2e,0x79,0x29,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x37,0x5d,0x29,0x20,0x2a,
    0x20,0x62,0x6f,0x6e,0x65,0x57,0x65,0x69,0x67,0x68,0x74,0x73,0x2e,0x79,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x5f,0x36,0x34,0x20,0x3d,0x20,0x6d,
    0x61,0x74,0x34,0x28,0x41,0x6e,0x69,0x6d,0x61,0x74,0x65,0x64,0x4d,0x65,0x73,0x68,
    0x50,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,0x72,0x73,0x56,0x53,0x5b,0x69,0x6e,0x74,
    0x28,0x62,0x6f,0x6e,0x65,0x49,0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,0x7a,0x29,0x20,
    0x2a,0x20,0x34,0x20,0x2b,0x20,0x34,0x5d,0x2c,0x20,0x41,0x6e,0x69,0x6d,0x61,0x74,
    0x65,0x64,0x4d,0x65,0x73,0x68,0x50,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,0x72,0x73,
    0x56,0x53,0x5b,0x69,0x6e,0x74,0x28,0x62,0x6f,0x6e,0x65,0x49,0x6e,0x64,0x69,0x63,
    0x65,0x73,0x2e,0x7a,0x29,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x35,0x5d,0x2c,0x20,
    0x41,0x6e,0x69,0x6d,0x61,0x74,0x65,0x64,0x4d,0x65,0x73,0x68,0x50,0x61,0x72,0x61,
    0x6d,0x65,0x74,0x65,0x72,0x73,0x56,0x53,0x5b,0x69,0x6e,0x74,0x28,0x62,0x6f,0x6e,
    0x65,0x49,0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,0x7a,0x29,0x20,0x2a,0x20,0x34,0x20,
    0x2b,0x20,0x36,0x5d,0x2c,0x20,0x41,0x6e,0x69,0x6d,0x61,0x74,0x65,0x64,0x4d,0x65,
    0x73,0x68,0x50,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,0x72,0x73,0x56,0x53,0x5b,0x69,
    0x6e,0x74,0x28,0x62,0x6f,0x6e,0x65,0x49,0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,0x7a,
    0x29,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x37,0x5d,0x29,0x20,0x2a,0x20,0x62,0x6f,
    0x6e,0x65,0x57,0x65,0x69,0x67,0x68,0x74,0x73,0x2e,0x7a,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x6d,0x61,0x74,0x34,0x20,0x5f,0x38,0x37,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,
    0x28,0x41,0x6e,0x69,0x6d,0x61,0x74,0x65,0x64,0x4d,0x65,0x73,0x68,0x50,0x61,0x72,
    0x61,0x6d,0x65,0x74,0x65,0x72,0x73,0x56,0x53,0x5b,0x69,0x6e,0x74,0x28,0x62,0x6f,
    0x6e,0x65,0x49,0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,0x77,0x29,0x20,0x2a,0x20,0x34,
    0x20,0x2b,0x20,0x34,0x5d,0x2c,0x20,0x41,0x6e,0x69,0x6d,0x61,0x74,0x65,0x64,0x4d,
    0x65,0x73,0x68,0x50,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,0x72,0x73,0x56,0x53,0x5b,
    0x69,0x6e,0x74,0x28,0x62,0x6f,0x6e,0x65,0x49,0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,
    0x77,0x29,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x35,0x5d,0x2c,0x20,0x41,0x6e,0x69,
    0x6d,0x61,0x74,0x65,0x64,0x4d,0x65,0x73,0x68,0x50,0x61,0x72,0x61,0x6d,0x65,0x74,
    0x65,0x72,0x73,0x56,0x53,0x5b,0x69,0x6e,0x74,0x28,0x62,0x6f,0x6e,0x65,0x49,0x6e,
    0x64,0x69,0x63,0x65,0x73,0x2e,0x77,0x29,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x36,
    0x5d,0x2c,0x20,0x41,0x6e,0x69,0x6d,0x61,0x74,0x65,0x64,0x4d,0x65,0x73,0x68,0x50,
    0x61,0x72,0x61,0x6d,0x65,0x74,0x65,0x72,0x73,0x56,0x53,0x5b,0x69,0x6e,0x74,0x28,
    0x62,0x6f,0x6e,0x65,0x49,0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,0x77,0x29,0x20,0x2a,
    0x20,0x34,0x20,0x2b,0x20,0x37,0x5d,0x29,0x20,0x2a,0x20,0x62,0x6f,0x6e,0x65,0x57,
    0x65,0x69,0x67,0x68,0x74,0x73,0x2e,0x77,0x3b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,
    0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x28,0x6d,0x61,0x74,
    0x34,0x28,0x41,0x6e,0x69,0x6d,0x61,0x74,0x65,0x64,0x4d,0x65,0x73,0x68,0x50,0x61,
    0x72,0x61,0x6d,0x65,0x74,0x65,0x72,0x73,0x56,0x53,0x5b,0x30,0x5d,0x2c,0x20,0x41,
    0x6e,0x69,0x6d,0x61,0x74,0x65,0x64,0x4d,0x65,0x73,0x68,0x50,0x61,0x72,0x61,0x6d,
    0x65,0x74,0x65,0x72,0x73,0x56,0x53,0x5b,0x31,0x5d,0x2c,0x20,0x41,0x6e,0x69,0x6d,
    0x61,0x74,0x65,0x64,0x4d,0x65,0x73,0x68,0x50,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,
    0x72,0x73,0x56,0x53,0x5b,0x32,0x5d,0x2c,0x20,0x41,0x6e,0x69,0x6d,0x61,0x74,0x65,
    0x64,0x4d,0x65,0x73,0x68,0x50,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,0x72,0x73,0x56,
    0x53,0x5b,0x33,0x5d,0x29,0x20,0x2a,0x20,0x6d,0x61,0x74,0x34,0x28,0x28,0x28,0x5f,
    0x33,0x32,0x5b,0x30,0x5d,0x20,0x2b,0x20,0x5f,0x34,0x31,0x5b,0x30,0x5d,0x29,0x20,
    0x2b,0x20,0x5f,0x36,0x34,0x5b,0x30,0x5d,0x29,0x20,0x2b,0x20,0x5f,0x38,0x37,0x5b,
    0x30,0x5d,0x2c,0x20,0x28,0x28,0x5f,0x33,0x32,0x5b,0x31,0x5d,0x20,0x2b,0x20,0x5f,
    0x34,0x31,0x5b,0x31,0x5d,0x29,0x20,0x2b,0x20,0x5f,0x36,0x34,0x5b,0x31,0x5d,0x29,
    0x20,0x2b,0x20,0x5f,0x38,0x37,0x5b,0x31,0x5d,0x2c,0x20,0x28,0x28,0x5f,0x33,0x32,
    0x5b,0x32,0x5d,0x20,0x2b,0x20,0x5f,0x34,0x31,0x5b,0x32,0x5d,0x29,0x20,0x2b,0x20,
    0x5f,0x36,0x34,0x5b,0x32,0x5d,0x29,0x20,0x2b,0x20,0x5f,0x38,0x37,0x5b,0x32,0x5d,
    0x2c,0x20,0x28,0x28,0x5f,0x33,0x32,0x5b,0x33,0x5d,0x20,0x2b,0x20,0x5f,0x34,0x31,
    0x5b,0x33,0x5d,0x29,0x20,0x2b,0x20,0x5f,0x36,0x34,0x5b,0x33,0x5d,0x29,0x20,0x2b,
    0x20,0x5f,0x38,0x37,0x5b,0x33,0x5d,0x29,0x29,0x20,0x2a,0x20,0x76,0x65,0x63,0x34,
    0x28,0x70,0x6f,0x73,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x6f,0x75,0x74,0x55,0x76,0x20,0x3d,0x20,0x75,0x76,0x73,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x00,
};
/*
    #version 100
    precision mediump float;
    precision highp int;
    
    uniform highp sampler2D diffuseTexture_diffuseSampler;
    
    varying highp vec2 outUv;
    
    void main()
    {
        gl_FragData[0] = texture2D(diffuseTexture_diffuseSampler, outUv);
    }
    
*/
static const char AnimatedMeshFS_source_glsl100[231] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x31,0x30,0x30,0x0a,0x70,0x72,0x65,
    0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,0x70,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,
    0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x75,0x6e,0x69,0x66,
    0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x73,0x61,0x6d,0x70,0x6c,0x65,
    0x72,0x32,0x44,0x20,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x54,0x65,0x78,0x74,0x75,
    0x72,0x65,0x5f,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x53,0x61,0x6d,0x70,0x6c,0x65,
    0x72,0x3b,0x0a,0x0a,0x76,0x61,0x72,0x79,0x69,0x6e,0x67,0x20,0x68,0x69,0x67,0x68,
    0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x6f,0x75,0x74,0x55,0x76,0x3b,0x0a,0x0a,0x76,
    0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x67,0x6c,0x5f,0x46,0x72,0x61,0x67,0x44,0x61,0x74,0x61,0x5b,0x30,0x5d,0x20,
    0x3d,0x20,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x44,0x28,0x64,0x69,0x66,0x66,
    0x75,0x73,0x65,0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x5f,0x64,0x69,0x66,0x66,0x75,
    0x73,0x65,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x6f,0x75,0x74,0x55,0x76,
    0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif /* SOKOL_GLES3 */
#if defined(SOKOL_GLES3)
/*
    #version 300 es
    
    uniform vec4 AnimatedMeshParametersVS[1024];
    layout(location = 3) in vec4 boneIndices;
    layout(location = 4) in vec4 boneWeights;
    layout(location = 0) in vec3 pos;
    out vec2 outUv;
    layout(location = 1) in vec2 uvs;
    layout(location = 2) in vec3 normals;
    
    void main()
    {
        mat4 _32 = mat4(AnimatedMeshParametersVS[int(boneIndices.x) * 4 + 4], AnimatedMeshParametersVS[int(boneIndices.x) * 4 + 5], AnimatedMeshParametersVS[int(boneIndices.x) * 4 + 6], AnimatedMeshParametersVS[int(boneIndices.x) * 4 + 7]) * boneWeights.x;
        mat4 _41 = mat4(AnimatedMeshParametersVS[int(boneIndices.y) * 4 + 4], AnimatedMeshParametersVS[int(boneIndices.y) * 4 + 5], AnimatedMeshParametersVS[int(boneIndices.y) * 4 + 6], AnimatedMeshParametersVS[int(boneIndices.y) * 4 + 7]) * boneWeights.y;
        mat4 _64 = mat4(AnimatedMeshParametersVS[int(boneIndices.z) * 4 + 4], AnimatedMeshParametersVS[int(boneIndices.z) * 4 + 5], AnimatedMeshParametersVS[int(boneIndices.z) * 4 + 6], AnimatedMeshParametersVS[int(boneIndices.z) * 4 + 7]) * boneWeights.z;
        mat4 _87 = mat4(AnimatedMeshParametersVS[int(boneIndices.w) * 4 + 4], AnimatedMeshParametersVS[int(boneIndices.w) * 4 + 5], AnimatedMeshParametersVS[int(boneIndices.w) * 4 + 6], AnimatedMeshParametersVS[int(boneIndices.w) * 4 + 7]) * boneWeights.w;
        gl_Position = (mat4(AnimatedMeshParametersVS[0], AnimatedMeshParametersVS[1], AnimatedMeshParametersVS[2], AnimatedMeshParametersVS[3]) * mat4(((_32[0] + _41[0]) + _64[0]) + _87[0], ((_32[1] + _41[1]) + _64[1]) + _87[1], ((_32[2] + _41[2]) + _64[2]) + _87[2], ((_32[3] + _41[3]) + _64[3]) + _87[3])) * vec4(pos, 1.0);
        outUv = uvs;
    }
    
*/
static const char AnimatedMeshVS_source_glsl300es[1638] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x41,0x6e,
    0x69,0x6d,0x61,0x74,0x65,0x64,0x4d,0x65,0x73,0x68,0x50,0x61,0x72,0x61,0x6d,0x65,
    0x74,0x65,0x72,0x73,0x56,0x53,0x5b,0x31,0x30,0x32,0x34,0x5d,0x3b,0x0a,0x6c,0x61,
    0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,
    0x33,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x34,0x20,0x62,0x6f,0x6e,0x65,0x49,
    0x6e,0x64,0x69,0x63,0x65,0x73,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,
    0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x34,0x29,0x20,0x69,0x6e,0x20,
    0x76,0x65,0x63,0x34,0x20,0x62,0x6f,0x6e,0x65,0x57,0x65,0x69,0x67,0x68,0x74,0x73,
    0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,
    0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x33,0x20,0x70,
    0x6f,0x73,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x6f,0x75,0x74,
    0x55,0x76,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,
    0x69,0x6f,0x6e,0x20,0x3d,0x20,0x31,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,0x63,0x32,
    0x20,0x75,0x76,0x73,0x3b,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,
    0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x32,0x29,0x20,0x69,0x6e,0x20,0x76,0x65,
    0x63,0x33,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x73,0x3b,0x0a,0x0a,0x76,0x6f,0x69,
    0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x6d,
    0x61,0x74,0x34,0x20,0x5f,0x33,0x32,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x41,
    0x6e,0x69,0x6d,0x61,0x74,0x65,0x64,0x4d,0x65,0x73,0x68,0x50,0x61,0x72,0x61,0x6d,
    0x65,0x74,0x65,0x72,0x73,0x56,0x53,0x5b,0x69,0x6e,0x74,0x28,0x62,0x6f,0x6e,0x65,
    0x49,0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,0x78,0x29,0x20,0x2a,0x20,0x34,0x20,0x2b,
    0x20,0x34,0x5d,0x2c,0x20,0x41,0x6e,0x69,0x6d,0x61,0x74,0x65,0x64,0x4d,0x65,0x73,
    0x68,0x50,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,0x72,0x73,0x56,0x53,0x5b,0x69,0x6e,
    0x74,0x28,0x62,0x6f,0x6e,0x65,0x49,0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,0x78,0x29,
    0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x35,0x5d,0x2c,0x20,0x41,0x6e,0x69,0x6d,0x61,
    0x74,0x65,0x64,0x4d,0x65,0x73,0x68,0x50,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,0x72,
    0x73,0x56,0x53,0x5b,0x69,0x6e,0x74,0x28,0x62,0x6f,0x6e,0x65,0x49,0x6e,0x64,0x69,
    0x63,0x65,0x73,0x2e,0x78,0x29,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x36,0x5d,0x2c,
    0x20,0x41,0x6e,0x69,0x6d,0x61,0x74,0x65,0x64,0x4d,0x65,0x73,0x68,0x50,0x61,0x72,
    0x61,0x6d,0x65,0x74,0x65,0x72,0x73,0x56,0x53,0x5b,0x69,0x6e,0x74,0x28,0x62,0x6f,
    0x6e,0x65,0x49,0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,0x78,0x29,0x20,0x2a,0x20,0x34,
    0x20,0x2b,0x20,0x37,0x5d,0x29,0x20,0x2a,0x20,0x62,0x6f,0x6e,0x65,0x57,0x65,0x69,
    0x67,0x68,0x74,0x73,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,
    0x20,0x5f,0x34,0x31,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x41,0x6e,0x69,0x6d,
    0x61,0x74,0x65,0x64,0x4d,0x65,0x73,0x68,0x50,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,
    0x72,0x73,0x56,0x53,0x5b,0x69,0x6e,0x74,0x28,0x62,0x6f,0x6e,0x65,0x49,0x6e,0x64,
    0x69,0x63,0x65,0x73,0x2e,0x79,0x29,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x34,0x5d,
    0x2c,0x20,0x41,0x6e,0x69,0x6d,0x61,0x74,0x65,0x64,0x4d,0x65,0x73,0x68,0x50,0x61,
    0x72,0x61,0x6d,0x65,0x74,0x65,0x72,0x73,0x56,0x53,0x5b,0x69,0x6e,0x74,0x28,0x62,
    0x6f,0x6e,0x65,0x49,0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,0x79,0x29,0x20,0x2a,0x20,
    0x34,0x20,0x2b,0x20,0x35,0x5d,0x2c,0x20,0x41,0x6e,0x69,0x6d,0x61,0x74,0x65,0x64,
    0x4d,0x65,0x73,0x68,0x50,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,0x72,0x73,0x56,0x53,
    0x5b,0x69,0x6e,0x74,0x28,0x62,0x6f,0x6e,0x65,0x49,0x6e,0x64,0x69,0x63,0x65,0x73,
    0x2e,0x79,0x29,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x36,0x5d,0x2c,0x20,0x41,0x6e,
    0x69,0x6d,0x61,0x74,0x65,0x64,0x4d,0x65,0x73,0x68,0x50,0x61,0x72,0x61,0x6d,0x65,
    0x74,0x65,0x72,0x73,0x56,0x53,0x5b,0x69,0x6e,0x74,0x28,0x62,0x6f,0x6e,0x65,0x49,
    0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,0x79,0x29,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,
    0x37,0x5d,0x29,0x20,0x2a,0x20,0x62,0x6f,0x6e,0x65,0x57,0x65,0x69,0x67,0x68,0x74,
    0x73,0x2e,0x79,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x5f,0x36,
    0x34,0x20,0x3d,0x20,0x6d,0x61,0x74,0x34,0x28,0x41,0x6e,0x69,0x6d,0x61,0x74,0x65,
    0x64,0x4d,0x65,0x73,0x68,0x50,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,0x72,0x73,0x56,
    0x53,0x5b,0x69,0x6e,0x74,0x28,0x62,0x6f,0x6e,0x65,0x49,0x6e,0x64,0x69,0x63,0x65,
    0x73,0x2e,0x7a,0x29,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x34,0x5d,0x2c,0x20,0x41,
    0x6e,0x69,0x6d,0x61,0x74,0x65,0x64,0x4d,0x65,0x73,0x68,0x50,0x61,0x72,0x61,0x6d,
    0x65,0x74,0x65,0x72,0x73,0x56,0x53,0x5b,0x69,0x6e,0x74,0x28,0x62,0x6f,0x6e,0x65,
    0x49,0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,0x7a,0x29,0x20,0x2a,0x20,0x34,0x20,0x2b,
    0x20,0x35,0x5d,0x2c,0x20,0x41,0x6e,0x69,0x6d,0x61,0x74,0x65,0x64,0x4d,0x65,0x73,
    0x68,0x50,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,0x72,0x73,0x56,0x53,0x5b,0x69,0x6e,
    0x74,0x28,0x62,0x6f,0x6e,0x65,0x49,0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,0x7a,0x29,
    0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x36,0x5d,0x2c,0x20,0x41,0x6e,0x69,0x6d,0x61,
    0x74,0x65,0x64,0x4d,0x65,0x73,0x68,0x50,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,0x72,
    0x73,0x56,0x53,0x5b,0x69,0x6e,0x74,0x28,0x62,0x6f,0x6e,0x65,0x49,0x6e,0x64,0x69,
    0x63,0x65,0x73,0x2e,0x7a,0x29,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x37,0x5d,0x29,
    0x20,0x2a,0x20,0x62,0x6f,0x6e,0x65,0x57,0x65,0x69,0x67,0x68,0x74,0x73,0x2e,0x7a,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x6d,0x61,0x74,0x34,0x20,0x5f,0x38,0x37,0x20,0x3d,
    0x20,0x6d,0x61,0x74,0x34,0x28,0x41,0x6e,0x69,0x6d,0x61,0x74,0x65,0x64,0x4d,0x65,
    0x73,0x68,0x50,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,0x72,0x73,0x56,0x53,0x5b,0x69,
    0x6e,0x74,0x28,0x62,0x6f,0x6e,0x65,0x49,0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,0x77,
    0x29,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x34,0x5d,0x2c,0x20,0x41,0x6e,0x69,0x6d,
    0x61,0x74,0x65,0x64,0x4d,0x65,0x73,0x68,0x50,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,
    0x72,0x73,0x56,0x53,0x5b,0x69,0x6e,0x74,0x28,0x62,0x6f,0x6e,0x65,0x49,0x6e,0x64,
    0x69,0x63,0x65,0x73,0x2e,0x77,0x29,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x35,0x5d,
    0x2c,0x20,0x41,0x6e,0x69,0x6d,0x61,0x74,0x65,0x64,0x4d,0x65,0x73,0x68,0x50,0x61,
    0x72,0x61,0x6d,0x65,0x74,0x65,0x72,0x73,0x56,0x53,0x5b,0x69,0x6e,0x74,0x28,0x62,
    0x6f,0x6e,0x65,0x49,0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,0x77,0x29,0x20,0x2a,0x20,
    0x34,0x20,0x2b,0x20,0x36,0x5d,0x2c,0x20,0x41,0x6e,0x69,0x6d,0x61,0x74,0x65,0x64,
    0x4d,0x65,0x73,0x68,0x50,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,0x72,0x73,0x56,0x53,
    0x5b,0x69,0x6e,0x74,0x28,0x62,0x6f,0x6e,0x65,0x49,0x6e,0x64,0x69,0x63,0x65,0x73,
    0x2e,0x77,0x29,0x20,0x2a,0x20,0x34,0x20,0x2b,0x20,0x37,0x5d,0x29,0x20,0x2a,0x20,
    0x62,0x6f,0x6e,0x65,0x57,0x65,0x69,0x67,0x68,0x74,0x73,0x2e,0x77,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x28,0x6d,0x61,0x74,0x34,0x28,0x41,0x6e,0x69,0x6d,0x61,0x74,0x65,0x64,0x4d,
    0x65,0x73,0x68,0x50,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,0x72,0x73,0x56,0x53,0x5b,
    0x30,0x5d,0x2c,0x20,0x41,0x6e,0x69,0x6d,0x61,0x74,0x65,0x64,0x4d,0x65,0x73,0x68,
    0x50,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,0x72,0x73,0x56,0x53,0x5b,0x31,0x5d,0x2c,
    0x20,0x41,0x6e,0x69,0x6d,0x61,0x74,0x65,0x64,0x4d,0x65,0x73,0x68,0x50,0x61,0x72,
    0x61,0x6d,0x65,0x74,0x65,0x72,0x73,0x56,0x53,0x5b,0x32,0x5d,0x2c,0x20,0x41,0x6e,
    0x69,0x6d,0x61,0x74,0x65,0x64,0x4d,0x65,0x73,0x68,0x50,0x61,0x72,0x61,0x6d,0x65,
    0x74,0x65,0x72,0x73,0x56,0x53,0x5b,0x33,0x5d,0x29,0x20,0x2a,0x20,0x6d,0x61,0x74,
    0x34,0x28,0x28,0x28,0x5f,0x33,0x32,0x5b,0x30,0x5d,0x20,0x2b,0x20,0x5f,0x34,0x31,
    0x5b,0x30,0x5d,0x29,0x20,0x2b,0x20,0x5f,0x36,0x34,0x5b,0x30,0x5d,0x29,0x20,0x2b,
    0x20,0x5f,0x38,0x37,0x5b,0x30,0x5d,0x2c,0x20,0x28,0x28,0x5f,0x33,0x32,0x5b,0x31,
    0x5d,0x20,0x2b,0x20,0x5f,0x34,0x31,0x5b,0x31,0x5d,0x29,0x20,0x2b,0x20,0x5f,0x36,
    0x34,0x5b,0x31,0x5d,0x29,0x20,0x2b,0x20,0x5f,0x38,0x37,0x5b,0x31,0x5d,0x2c,0x20,
    0x28,0x28,0x5f,0x33,0x32,0x5b,0x32,0x5d,0x20,0x2b,0x20,0x5f,0x34,0x31,0x5b,0x32,
    0x5d,0x29,0x20,0x2b,0x20,0x5f,0x36,0x34,0x5b,0x32,0x5d,0x29,0x20,0x2b,0x20,0x5f,
    0x38,0x37,0x5b,0x32,0x5d,0x2c,0x20,0x28,0x28,0x5f,0x33,0x32,0x5b,0x33,0x5d,0x20,
    0x2b,0x20,0x5f,0x34,0x31,0x5b,0x33,0x5d,0x29,0x20,0x2b,0x20,0x5f,0x36,0x34,0x5b,
    0x33,0x5d,0x29,0x20,0x2b,0x20,0x5f,0x38,0x37,0x5b,0x33,0x5d,0x29,0x29,0x20,0x2a,
    0x20,0x76,0x65,0x63,0x34,0x28,0x70,0x6f,0x73,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,
    0x0a,0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x55,0x76,0x20,0x3d,0x20,0x75,0x76,0x73,
    0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 300 es
    precision mediump float;
    precision highp int;
    
    uniform highp sampler2D diffuseTexture_diffuseSampler;
    
    layout(location = 0) out highp vec4 frag_color;
    in highp vec2 outUv;
    
    void main()
    {
        frag_color = texture(diffuseTexture_diffuseSampler, outUv);
    }
    
*/
static const char AnimatedMeshFS_source_glsl300es[271] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,
    0x6f,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x73,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x54,0x65,
    0x78,0x74,0x75,0x72,0x65,0x5f,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x53,0x61,0x6d,
    0x70,0x6c,0x65,0x72,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,
    0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,
    0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,
    0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x69,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,
    0x76,0x65,0x63,0x32,0x20,0x6f,0x75,0x74,0x55,0x76,0x3b,0x0a,0x0a,0x76,0x6f,0x69,
    0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x74,0x65,0x78,0x74,
    0x75,0x72,0x65,0x28,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x54,0x65,0x78,0x74,0x75,
    0x72,0x65,0x5f,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x53,0x61,0x6d,0x70,0x6c,0x65,
    0x72,0x2c,0x20,0x6f,0x75,0x74,0x55,0x76,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
#endif /* SOKOL_GLES3 */
#if defined(SOKOL_D3D11)
/*
    cbuffer AnimatedMeshParametersVS : register(b0)
    {
        row_major float4x4 _16_mvp : packoffset(c0);
        row_major float4x4 _16_bones[255] : packoffset(c4);
    };
    
    
    static float4 gl_Position;
    static float4 boneIndices;
    static float4 boneWeights;
    static float3 pos;
    static float2 outUv;
    static float2 uvs;
    static float3 normals;
    
    struct SPIRV_Cross_Input
    {
        float3 pos : TEXCOORD0;
        float2 uvs : TEXCOORD1;
        float3 normals : TEXCOORD2;
        float4 boneIndices : TEXCOORD3;
        float4 boneWeights : TEXCOORD4;
    };
    
    struct SPIRV_Cross_Output
    {
        float2 outUv : TEXCOORD0;
        float4 gl_Position : SV_Position;
    };
    
    void vert_main()
    {
        float4x4 _32 = _16_bones[int(boneIndices.x)] * boneWeights.x;
        float4x4 _41 = _16_bones[int(boneIndices.y)] * boneWeights.y;
        float4x4 _64 = _16_bones[int(boneIndices.z)] * boneWeights.z;
        float4x4 _87 = _16_bones[int(boneIndices.w)] * boneWeights.w;
        gl_Position = mul(float4(pos, 1.0f), mul(float4x4(((_32[0] + _41[0]) + _64[0]) + _87[0], ((_32[1] + _41[1]) + _64[1]) + _87[1], ((_32[2] + _41[2]) + _64[2]) + _87[2], ((_32[3] + _41[3]) + _64[3]) + _87[3]), _16_mvp));
        outUv = uvs;
    }
    
    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        boneIndices = stage_input.boneIndices;
        boneWeights = stage_input.boneWeights;
        pos = stage_input.pos;
        uvs = stage_input.uvs;
        normals = stage_input.normals;
        vert_main();
        SPIRV_Cross_Output stage_output;
        stage_output.gl_Position = gl_Position;
        stage_output.outUv = outUv;
        return stage_output;
    }
*/
static const char AnimatedMeshVS_source_hlsl5[1530] = {
    0x63,0x62,0x75,0x66,0x66,0x65,0x72,0x20,0x41,0x6e,0x69,0x6d,0x61,0x74,0x65,0x64,
    0x4d,0x65,0x73,0x68,0x50,0x61,0x72,0x61,0x6d,0x65,0x74,0x65,0x72,0x73,0x56,0x53,
    0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x62,0x30,0x29,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x6f,0x77,0x5f,0x6d,0x61,0x6a,0x6f,0x72,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x5f,0x31,0x36,0x5f,0x6d,0x76,0x70,
    0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x30,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x72,0x6f,0x77,0x5f,0x6d,0x61,0x6a,0x6f,0x72,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x5f,0x31,0x36,0x5f,0x62,0x6f,
    0x6e,0x65,0x73,0x5b,0x32,0x35,0x35,0x5d,0x20,0x3a,0x20,0x70,0x61,0x63,0x6b,0x6f,
    0x66,0x66,0x73,0x65,0x74,0x28,0x63,0x34,0x29,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x0a,
    0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,
    0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,
    0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x62,0x6f,0x6e,0x65,0x49,0x6e,0x64,
    0x69,0x63,0x65,0x73,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x34,0x20,0x62,0x6f,0x6e,0x65,0x57,0x65,0x69,0x67,0x68,0x74,0x73,0x3b,
    0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x70,
    0x6f,0x73,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x32,0x20,0x6f,0x75,0x74,0x55,0x76,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x75,0x76,0x73,0x3b,0x0a,0x73,0x74,0x61,0x74,
    0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,
    0x73,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,
    0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x33,0x20,0x70,0x6f,0x73,0x20,0x3a,0x20,
    0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x30,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x32,0x20,0x75,0x76,0x73,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,
    0x4f,0x4f,0x52,0x44,0x31,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x33,0x20,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x73,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,
    0x4f,0x4f,0x52,0x44,0x32,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x20,0x62,0x6f,0x6e,0x65,0x49,0x6e,0x64,0x69,0x63,0x65,0x73,0x20,0x3a,0x20,
    0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x33,0x3b,0x0a,0x20,0x20,0x20,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x20,0x62,0x6f,0x6e,0x65,0x57,0x65,0x69,0x67,0x68,0x74,
    0x73,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x34,0x3b,0x0a,0x7d,
    0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,
    0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,
    0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x32,0x20,0x6f,0x75,0x74,0x55,0x76,0x20,
    0x3a,0x20,0x54,0x45,0x58,0x43,0x4f,0x4f,0x52,0x44,0x30,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,
    0x69,0x6f,0x6e,0x20,0x3a,0x20,0x53,0x56,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x76,0x65,0x72,0x74,
    0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,
    0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x5f,0x33,0x32,0x20,0x3d,0x20,0x5f,0x31,0x36,
    0x5f,0x62,0x6f,0x6e,0x65,0x73,0x5b,0x69,0x6e,0x74,0x28,0x62,0x6f,0x6e,0x65,0x49,
    0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,0x78,0x29,0x5d,0x20,0x2a,0x20,0x62,0x6f,0x6e,
    0x65,0x57,0x65,0x69,0x67,0x68,0x74,0x73,0x2e,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x5f,0x34,0x31,0x20,0x3d,0x20,0x5f,
    0x31,0x36,0x5f,0x62,0x6f,0x6e,0x65,0x73,0x5b,0x69,0x6e,0x74,0x28,0x62,0x6f,0x6e,
    0x65,0x49,0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,0x79,0x29,0x5d,0x20,0x2a,0x20,0x62,
    0x6f,0x6e,0x65,0x57,0x65,0x69,0x67,0x68,0x74,0x73,0x2e,0x79,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x5f,0x36,0x34,0x20,0x3d,
    0x20,0x5f,0x31,0x36,0x5f,0x62,0x6f,0x6e,0x65,0x73,0x5b,0x69,0x6e,0x74,0x28,0x62,
    0x6f,0x6e,0x65,0x49,0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,0x7a,0x29,0x5d,0x20,0x2a,
    0x20,0x62,0x6f,0x6e,0x65,0x57,0x65,0x69,0x67,0x68,0x74,0x73,0x2e,0x7a,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x20,0x5f,0x38,0x37,
    0x20,0x3d,0x20,0x5f,0x31,0x36,0x5f,0x62,0x6f,0x6e,0x65,0x73,0x5b,0x69,0x6e,0x74,
    0x28,0x62,0x6f,0x6e,0x65,0x49,0x6e,0x64,0x69,0x63,0x65,0x73,0x2e,0x77,0x29,0x5d,
    0x20,0x2a,0x20,0x62,0x6f,0x6e,0x65,0x57,0x65,0x69,0x67,0x68,0x74,0x73,0x2e,0x77,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,
    0x6e,0x20,0x3d,0x20,0x6d,0x75,0x6c,0x28,0x66,0x6c,0x6f,0x61,0x74,0x34,0x28,0x70,
    0x6f,0x73,0x2c,0x20,0x31,0x2e,0x30,0x66,0x29,0x2c,0x20,0x6d,0x75,0x6c,0x28,0x66,
    0x6c,0x6f,0x61,0x74,0x34,0x78,0x34,0x28,0x28,0x28,0x5f,0x33,0x32,0x5b,0x30,0x5d,
    0x20,0x2b,0x20,0x5f,0x34,0x31,0x5b,0x30,0x5d,0x29,0x20,0x2b,0x20,0x5f,0x36,0x34,
    0x5b,0x30,0x5d,0x29,0x20,0x2b,0x20,0x5f,0x38,0x37,0x5b,0x30,0x5d,0x2c,0x20,0x28,
    0x28,0x5f,0x33,0x32,0x5b,0x31,0x5d,0x20,0x2b,0x20,0x5f,0x34,0x31,0x5b,0x31,0x5d,
    0x29,0x20,0x2b,0x20,0x5f,0x36,0x34,0x5b,0x31,0x5d,0x29,0x20,0x2b,0x20,0x5f,0x38,
    0x37,0x5b,0x31,0x5d,0x2c,0x20,0x28,0x28,0x5f,0x33,0x32,0x5b,0x32,0x5d,0x20,0x2b,
    0x20,0x5f,0x34,0x31,0x5b,0x32,0x5d,0x29,0x20,0x2b,0x20,0x5f,0x36,0x34,0x5b,0x32,
    0x5d,0x29,0x20,0x2b,0x20,0x5f,0x38,0x37,0x5b,0x32,0x5d,0x2c,0x20,0x28,0x28,0x5f,
    0x33,0x32,0x5b,0x33,0x5d,0x20,0x2b,0x20,0x5f,0x34,0x31,0x5b,0x33,0x5d,0x29,0x20,
    0x2b,0x20,0x5f,0x36,0x34,0x5b,0x33,0x5d,0x29,0x20,0x2b,0x20,0x5f,0x38,0x37,0x5b,
    0x33,0x5d,0x29,0x2c,0x20,0x5f,0x31,0x36,0x5f,0x6d,0x76,0x70,0x29,0x29,0x3b,0x0a,
    0x20,0x20,0x20,0x20,0x6f,0x75,0x74,0x55,0x76,0x20,0x3d,0x20,0x75,0x76,0x73,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,
    0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x28,0x53,0x50,0x49,0x52,
    0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x20,0x73,0x74,
    0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x62,0x6f,0x6e,0x65,0x49,0x6e,0x64,0x69,0x63,0x65,0x73,0x20,0x3d,0x20,0x73,
    0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x62,0x6f,0x6e,0x65,0x49,
    0x6e,0x64,0x69,0x63,0x65,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x62,0x6f,0x6e,0x65,
    0x57,0x65,0x69,0x67,0x68,0x74,0x73,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,
    0x69,0x6e,0x70,0x75,0x74,0x2e,0x62,0x6f,0x6e,0x65,0x57,0x65,0x69,0x67,0x68,0x74,
    0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x70,0x6f,0x73,0x20,0x3d,0x20,0x73,0x74,0x61,
    0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x2e,0x70,0x6f,0x73,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x75,0x76,0x73,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,
    0x70,0x75,0x74,0x2e,0x75,0x76,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,0x6e,0x6f,0x72,
    0x6d,0x61,0x6c,0x73,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,
    0x75,0x74,0x2e,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x73,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x76,0x65,0x72,0x74,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,
    0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,
    0x75,0x74,0x2e,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,
    0x20,0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,0x2e,0x6f,
    0x75,0x74,0x55,0x76,0x20,0x3d,0x20,0x6f,0x75,0x74,0x55,0x76,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,
    0x75,0x74,0x70,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x00,
};
/*
    Texture2D<float4> diffuseTexture : register(t0);
    SamplerState diffuseSampler : register(s0);
    
    static float4 frag_color;
    static float2 outUv;
    
    struct SPIRV_Cross_Input
    {
        float2 outUv : TEXCOORD0;
    };
    
    struct SPIRV_Cross_Output
    {
        float4 frag_color : SV_Target0;
    };
    
    void frag_main()
    {
        frag_color = diffuseTexture.Sample(diffuseSampler, outUv);
    }
    
    SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
    {
        outUv = stage_input.outUv;
        frag_main();
        SPIRV_Cross_Output stage_output;
        stage_output.frag_color = frag_color;
        return stage_output;
    }
*/
static const char AnimatedMeshFS_source_hlsl5[568] = {
    0x54,0x65,0x78,0x74,0x75,0x72,0x65,0x32,0x44,0x3c,0x66,0x6c,0x6f,0x61,0x74,0x34,
    0x3e,0x20,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x54,0x65,0x78,0x74,0x75,0x72,0x65,
    0x20,0x3a,0x20,0x72,0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x74,0x30,0x29,0x3b,
    0x0a,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x53,0x74,0x61,0x74,0x65,0x20,0x64,0x69,
    0x66,0x66,0x75,0x73,0x65,0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x20,0x3a,0x20,0x72,
    0x65,0x67,0x69,0x73,0x74,0x65,0x72,0x28,0x73,0x30,0x29,0x3b,0x0a,0x0a,0x73,0x74,
    0x61,0x74,0x69,0x63,0x20,0x66,0x6c,0x6f,0x61,0x74,0x34,0x20,0x66,0x72,0x61,0x67,
    0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x73,0x74,0x61,0x74,0x69,0x63,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x32,0x20,0x6f,0x75,0x74,0x55,0x76,0x3b,0x0a,0x0a,0x73,0x74,
    0x72,0x75,0x63,0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,
    0x5f,0x49,0x6e,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x32,0x20,0x6f,0x75,0x74,0x55,0x76,0x20,0x3a,0x20,0x54,0x45,0x58,0x43,
    0x4f,0x4f,0x52,0x44,0x30,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x73,0x74,0x72,0x75,0x63,
    0x74,0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,
    0x74,0x70,0x75,0x74,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3a,0x20,0x53,
    0x56,0x5f,0x54,0x61,0x72,0x67,0x65,0x74,0x30,0x3b,0x0a,0x7d,0x3b,0x0a,0x0a,0x76,
    0x6f,0x69,0x64,0x20,0x66,0x72,0x61,0x67,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,
    0x20,0x3d,0x20,0x64,0x69,0x66,0x66,0x75,0x73,0x65,0x54,0x65,0x78,0x74,0x75,0x72,
    0x65,0x2e,0x53,0x61,0x6d,0x70,0x6c,0x65,0x28,0x64,0x69,0x66,0x66,0x75,0x73,0x65,
    0x53,0x61,0x6d,0x70,0x6c,0x65,0x72,0x2c,0x20,0x6f,0x75,0x74,0x55,0x76,0x29,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,
    0x4f,0x75,0x74,0x70,0x75,0x74,0x20,0x6d,0x61,0x69,0x6e,0x28,0x53,0x50,0x49,0x52,
    0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x49,0x6e,0x70,0x75,0x74,0x20,0x73,0x74,
    0x61,0x67,0x65,0x5f,0x69,0x6e,0x70,0x75,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,
    0x20,0x6f,0x75,0x74,0x55,0x76,0x20,0x3d,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x69,
    0x6e,0x70,0x75,0x74,0x2e,0x6f,0x75,0x74,0x55,0x76,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x66,0x72,0x61,0x67,0x5f,0x6d,0x61,0x69,0x6e,0x28,0x29,0x3b,0x0a,0x20,0x20,0x20,
    0x20,0x53,0x50,0x49,0x52,0x56,0x5f,0x43,0x72,0x6f,0x73,0x73,0x5f,0x4f,0x75,0x74,
    0x70,0x75,0x74,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,0x75,0x74,
    0x3b,0x0a,0x20,0x20,0x20,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,0x70,
    0x75,0x74,0x2e,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,
    0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x73,0x74,0x61,0x67,0x65,0x5f,0x6f,0x75,0x74,
    0x70,0x75,0x74,0x3b,0x0a,0x7d,0x0a,0x00,
};
#endif /* SOKOL_D3D11 */
#if !defined(SOKOL_GFX_INCLUDED)
  #error "Please include sokol_gfx.h before animated_mesh.hpp"
#endif
static inline const sg_shader_desc* AnimatedMesh_shader_desc(sg_backend backend) {
  #if defined(SOKOL_GLCORE33)
  if (backend == SG_BACKEND_GLCORE33) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "pos";
      desc.attrs[1].name = "uvs";
      desc.attrs[2].name = "normals";
      desc.attrs[3].name = "boneIndices";
      desc.attrs[4].name = "boneWeights";
      desc.vs.source = AnimatedMeshVS_source_glsl330;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 16384;
      desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.vs.uniform_blocks[0].uniforms[0].name = "AnimatedMeshParametersVS";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 1024;
      desc.fs.source = AnimatedMeshFS_source_glsl330;
      desc.fs.entry = "main";
      desc.fs.images[0].used = true;
      desc.fs.images[0].multisampled = false;
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
      desc.fs.samplers[0].used = true;
      desc.fs.samplers[0].sampler_type = SG_SAMPLERTYPE_FILTERING;
      desc.fs.image_sampler_pairs[0].used = true;
      desc.fs.image_sampler_pairs[0].image_slot = 0;
      desc.fs.image_sampler_pairs[0].sampler_slot = 0;
      desc.fs.image_sampler_pairs[0].glsl_name = "diffuseTexture_diffuseSampler";
      desc.label = "AnimatedMesh_shader";
    }
    return &desc;
  }
  #endif /* SOKOL_GLCORE33 */
  #if defined(SOKOL_GLES3)
  if (backend == SG_BACKEND_GLES3) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "pos";
      desc.attrs[1].name = "uvs";
      desc.attrs[2].name = "normals";
      desc.attrs[3].name = "boneIndices";
      desc.attrs[4].name = "boneWeights";
      desc.vs.source = AnimatedMeshVS_source_glsl100;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 16384;
      desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.vs.uniform_blocks[0].uniforms[0].name = "AnimatedMeshParametersVS";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 1024;
      desc.fs.source = AnimatedMeshFS_source_glsl100;
      desc.fs.entry = "main";
      desc.fs.images[0].used = true;
      desc.fs.images[0].multisampled = false;
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
      desc.fs.samplers[0].used = true;
      desc.fs.samplers[0].sampler_type = SG_SAMPLERTYPE_FILTERING;
      desc.fs.image_sampler_pairs[0].used = true;
      desc.fs.image_sampler_pairs[0].image_slot = 0;
      desc.fs.image_sampler_pairs[0].sampler_slot = 0;
      desc.fs.image_sampler_pairs[0].glsl_name = "diffuseTexture_diffuseSampler";
      desc.label = "AnimatedMesh_shader";
    }
    return &desc;
  }
  #endif /* SOKOL_GLES3 */
  #if defined(SOKOL_GLES3)
  if (backend == SG_BACKEND_GLES3) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].name = "pos";
      desc.attrs[1].name = "uvs";
      desc.attrs[2].name = "normals";
      desc.attrs[3].name = "boneIndices";
      desc.attrs[4].name = "boneWeights";
      desc.vs.source = AnimatedMeshVS_source_glsl300es;
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 16384;
      desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.vs.uniform_blocks[0].uniforms[0].name = "AnimatedMeshParametersVS";
      desc.vs.uniform_blocks[0].uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
      desc.vs.uniform_blocks[0].uniforms[0].array_count = 1024;
      desc.fs.source = AnimatedMeshFS_source_glsl300es;
      desc.fs.entry = "main";
      desc.fs.images[0].used = true;
      desc.fs.images[0].multisampled = false;
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
      desc.fs.samplers[0].used = true;
      desc.fs.samplers[0].sampler_type = SG_SAMPLERTYPE_FILTERING;
      desc.fs.image_sampler_pairs[0].used = true;
      desc.fs.image_sampler_pairs[0].image_slot = 0;
      desc.fs.image_sampler_pairs[0].sampler_slot = 0;
      desc.fs.image_sampler_pairs[0].glsl_name = "diffuseTexture_diffuseSampler";
      desc.label = "AnimatedMesh_shader";
    }
    return &desc;
  }
  #endif /* SOKOL_GLES3 */
  #if defined(SOKOL_D3D11)
  if (backend == SG_BACKEND_D3D11) {
    static sg_shader_desc desc;
    static bool valid;
    if (!valid) {
      valid = true;
      desc.attrs[0].sem_name = "TEXCOORD";
      desc.attrs[0].sem_index = 0;
      desc.attrs[1].sem_name = "TEXCOORD";
      desc.attrs[1].sem_index = 1;
      desc.attrs[2].sem_name = "TEXCOORD";
      desc.attrs[2].sem_index = 2;
      desc.attrs[3].sem_name = "TEXCOORD";
      desc.attrs[3].sem_index = 3;
      desc.attrs[4].sem_name = "TEXCOORD";
      desc.attrs[4].sem_index = 4;
      desc.vs.source = AnimatedMeshVS_source_hlsl5;
      desc.vs.d3d11_target = "vs_5_0";
      desc.vs.entry = "main";
      desc.vs.uniform_blocks[0].size = 16384;
      desc.vs.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
      desc.fs.source = AnimatedMeshFS_source_hlsl5;
      desc.fs.d3d11_target = "ps_5_0";
      desc.fs.entry = "main";
      desc.fs.images[0].used = true;
      desc.fs.images[0].multisampled = false;
      desc.fs.images[0].image_type = SG_IMAGETYPE_2D;
      desc.fs.images[0].sample_type = SG_IMAGESAMPLETYPE_FLOAT;
      desc.fs.samplers[0].used = true;
      desc.fs.samplers[0].sampler_type = SG_SAMPLERTYPE_FILTERING;
      desc.fs.image_sampler_pairs[0].used = true;
      desc.fs.image_sampler_pairs[0].image_slot = 0;
      desc.fs.image_sampler_pairs[0].sampler_slot = 0;
      desc.label = "AnimatedMesh_shader";
    }
    return &desc;
  }
  #endif /* SOKOL_D3D11 */
  return 0;
}
